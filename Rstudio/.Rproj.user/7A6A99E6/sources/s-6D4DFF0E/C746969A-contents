#AKFIT R Edition
#Rafel Vanhoz Ribeiro

#INÍCIO
#escolhendo a biblioteca.

library(tidyverse)  #Tidtverse é uma coletânea de biblioteca para análise de dados
library(minpack.lm) #minpack é uma biblioteca para realização do levenberg-marquardt
library(matlib) #matlib é uma biblioteca que realiza calculos matriciais e inversões de matrizes

# abrindo o arquivo de dados dos elementos
data=readLines(file.choose()) #Abre janela pra escolher o arquivo e lê suas linhas
data=data[-1] #remove a primeira linha do arquivo (cabeçalho)
data=data[-1] #remove a primeira linha do arquivo após remover a primeira linha anterior (nome das colunas)
data=data.frame(data) #transforma o arquivo de dados e data frame

data=separate( #função para separar as colunas do arquivo de dados
  data, "data", c(
  'Isotopo', 
  'Egama', 
  'IN', 
  'Efic', 
  'sEfic', 
  'Eres', 
  'sEres', 
  'AspCd', 
  'sAspCd', 
  'Asp', 
  'sAsp', 
  'Rcd', 
  'sRcd', 
  'k0', 
  'sk0', 
  'FCd', 
  'sFCd', 
  'Gepi', 
  'sGepi', 
  'Gth', 
  'sGth', 
  'Q0', 
  'sQ0', 
  'idouro'),
  sep = '\\s{1,}'
  )

#transformando cada columa como variáveis numéricas

Isotopo=as.character(data$Isotopo)
Egama=as.numeric(data$Egama)
IN=as.numeric(data$IN)
Efic=as.numeric(data$Efic)
sEfic=as.numeric(data$sEfic)
Eres=as.numeric(data$Eres)
sEres=as.numeric(data$sEres)
AspCd=as.numeric(data$AspCd)
sAspCd=as.numeric(data$sAspCd)
Asp=as.numeric(data$Asp)
sAsp=as.numeric(data$sAsp)
Rcd=as.numeric(data$Rcd)
sRcd=as.numeric(data$sRcd)
FCd=as.numeric(data$FCd)
sFCd=as.numeric(data$sFCd)
Gepi=as.numeric(data$Gepi)
sGepi=as.numeric(data$sGepi)
Gth=as.numeric(data$Gth)
sGth=as.numeric(data$sGth)
Q0=as.numeric(data$Q0)
sQ0=as.numeric(data$sQ0)
idouro=as.numeric(data$idouro)

# abrindo o arquivo de dados dos ouros
#mesmo procedimento utilizado anteriormente
dataau=readLines(file.choose())
dataau=dataau[-1]
dataau=dataau[-1]
dataau=data.frame(dataau)

dataau=separate(
  dataau, "dataau", c(
    'Isotopo', 
    'Egama', 
    'IN', 
    'Efic', 
    'sEfic', 
    'Eres', 
    'sEres', 
    'AspCd', 
    'sAspCd', 
    'Asp', 
    'sAsp', 
    'Rcd', 
    'sRcd', 
    'k0', 
    'sk0', 
    'FCd', 
    'sFCd', 
    'Gepi', 
    'sGepi', 
    'Gth', 
    'sGth', 
    'Q0', 
    'sQ0'),
  sep = '\\s{1,}'
)

Isotopoau=as.character(dataau$Isotopo)
Egamaau=as.numeric(dataau$Egama)
INau=as.numeric(dataau$IN)
Eficau=as.numeric(dataau$Efic)
sEficau=as.numeric(dataau$sEfic)
Eresau=as.numeric(dataau$Eres)
sEresau=as.numeric(dataau$sEres)
AspCdau=as.numeric(dataau$AspCd)
sAspCdau=as.numeric(dataau$sAspCd)
Aspau=as.numeric(dataau$Asp)
sAspau=as.numeric(dataau$sAsp)
Rcdau=as.numeric(dataau$Rcd)
sRcdau=as.numeric(dataau$sRcd)
FCdau=as.numeric(dataau$FCd)
sFCdau=as.numeric(dataau$sFCd)
Gepiau=as.numeric(dataau$Gepi)
sGepiau=as.numeric(dataau$sGepi)
Gthau=as.numeric(dataau$Gth)
sGthau=as.numeric(dataau$sGth)
Q0au=as.numeric(dataau$Q0)
sQ0au=as.numeric(dataau$sQ0)

#O comentário abaixo refere-se ao novo padrão de arquivo de dados para o novo cálculo dos parâmetros

# data2=readLines(file.choose())
# data2=data2[-1]
# data2=data2[-1]
# data2=data.frame(data2)
# 
# data2=separate(
#   data2, "data2", c(
#     'Isotopo',
#     'N', 
#     'sN',
#     'NCd',
#     'sNCd',
#     'fz',
#     'sfz',
#     'fzCd',
#     'sfzCd',
#     'fa',
#     'sfa',
#     'faCd',
#     'sfaCd',
#     'D',
#     'sD',
#     'DCd',
#     'sDCd',
#     'C',
#     'Sc',
#     'CCd',
#     'sCCd',
#     'S',
#     'sS',
#     'SCd',
#     'sSCd',
#     'w',
#     'sw',
#     'wCd',
#     'swCd',
#     'Egama', 
#     'IN', 
#     'Efic', 
#     'sEfic', 
#     'Eres', 
#     'sEres', 
#     'k0', 
#     'sk0', 
#     'Fcd', 
#     'sFCd', 
#     'Gepi', 
#     'sGepi', 
#     'Gth', 
#     'sGth', 
#     'Q0', 
#     'sigma',
#     'idouro'),
#   sep = '\\s{1,}'
# )
# 
# # data2au=readLines(file.choose())
# # data2au=data2au[-1]
# # data2au=data2au[-1]
# # data2au=data.frame(data2au)
# 
# data2au=separate(
#   data2au, "data2au", c(
#     'Isotopo',
#     'N', 
#     'sN',
#     'NCd',
#     'sNCd',
#     'fz',
#     'sfz',
#     'fzCd',
#     'sfzCd',
#     'fa',
#     'sfa',
#     'faCd',
#     'sfaCd',
#     'D',
#     'sD',
#     'DCd',
#     'sDCd',
#     'C',
#     'Sc',
#     'CCd',
#     'sCCd',
#     'S',
#     'sS',
#     'SCd',
#     'sSCd',
#     'w',
#     'sw',
#     'wCd',
#     'swCd',
#     'Egama', 
#     'IN', 
#     'Efic', 
#     'sEfic', 
#     'Eres', 
#     'sEres', 
#     'k0', 
#     'sk0', 
#     'Fcd', 
#     'sFCd', 
#     'Gepi', 
#     'sGepi', 
#     'Gth', 
#     'sGth', 
#     'Q0', 
#     'sigma'),
#   sep = '\\s{1,}'
# )

#Calcula erro da Enegia de Ressonância (sEres)
sEres=sEres*Eres/100
sEresau=sEresau*Eresau/100

#Define uma variável que conta o total de linhas do arquivo de dados
N=nrow(data)

Ys=expression(log(AspCd/Q0/Efic/FCd/Gepi))
Ysuperior=eval(Ys)

Yi=expression(log(((Asp-AspCd/FCd)/(Aspau-AspCdau/FCdau))*(Gthau/Gth*Eficau/Efic)))
Yinferior=0
for(i in 1:N){
  Yinferior[i]=log(((Asp[i]-AspCd[i]/FCd[i])/(Aspau[idouro[i]]-AspCdau[idouro[i]]/FCdau[idouro[i]]))*(Gthau[idouro[i]]/Gth[i]*Eficau[idouro[i]]/Efic[i]))
}
Y=c(Ysuperior,Yinferior)

#derivadas parciais de Ysuperior e Yinferior

#Ysuperior
dYsAspCd=eval(D(Ys,'AspCd'))
dYsQ0=eval(D(Ys,'Q0'))
dYsEfic=eval(D(Ys,'Efic'))
dYsFCd=eval(D(Ys,'FCd'))
dYsGepi=eval(D(Ys,'Gepi'))
#Yinferior sem ouro
dYiAsp=eval(D(Yi, 'Asp'))
dYiAspCd=eval(D(Yi, 'AspCd'))
dYiFCd=eval(D(Yi, 'FCd'))
dYiGth=eval(D(Yi, 'Gth'))
dYiEfic=eval(D(Yi, 'Efic'))
#Yinferior com ouro
dYiAspauexp=D(expression(log(((Asp-AspCd/FCd)/(Aspau-AspCdau/FCdau))*(Gthau/Gth*Eficau/Efic))), 'Aspau')
    dYiAspau=eval(-((Asp - AspCd/FCd)/(Aspau[idouro] - AspCdau[idouro]/FCdau[idouro])^2 * (Gthau[idouro]/Gth * Eficau[idouro]/Efic)/(((Asp - AspCd/FCd)/(Aspau[idouro] - AspCdau[idouro]/FCdau[idouro])) * (Gthau[idouro]/Gth * Eficau[idouro]/Efic))))
dYiAspCdauexp=D(expression(log(((Asp-AspCd/FCd)/(Aspau-AspCdau/FCdau))*(Gthau/Gth*Eficau/Efic))), 'AspCdau')
    dYiAspCdau=eval((Asp - AspCd/FCd) * (1/FCdau[idouro])/(Aspau[idouro] - AspCdau[idouro]/FCdau[idouro])^2 * (Gthau[idouro]/Gth * Eficau[idouro]/Efic)/(((Asp - AspCd/FCd)/(Aspau[idouro] - AspCdau[idouro]/FCdau[idouro])) * (Gthau[idouro]/Gth * Eficau[idouro]/Efic)))
dYiFCdauexp=D(expression(log(((Asp-AspCd/FCd)/(Aspau-AspCdau/FCdau))*(Gthau/Gth*Eficau/Efic))), 'FCdau')
    dYiFCdau=eval(-((Asp - AspCd/FCd) * (AspCdau[idouro]/FCdau[idouro]^2)/(Aspau[idouro] - AspCdau[idouro]/FCdau[idouro])^2 * (Gthau[idouro]/Gth * Eficau[idouro]/Efic)/(((Asp - AspCd/FCd)/(Aspau[idouro] - AspCdau[idouro]/FCdau[idouro])) * (Gthau[idouro]/Gth * Eficau[idouro]/Efic))))
dYiGthauexp=D(expression(log(((Asp-AspCd/FCd)/(Aspau-AspCdau/FCdau))*(Gthau/Gth*Eficau/Efic))), 'Gthau')
    dYiGthau=eval(((Asp - AspCd/FCd)/(Aspau[idouro] - AspCdau[idouro]/FCdau[idouro])) * (1/Gth * Eficau[idouro]/Efic)/(((Asp - AspCd/FCd)/(Aspau[idouro] - AspCdau[idouro]/FCdau[idouro])) * (Gthau[idouro]/Gth * Eficau[idouro]/Efic)))
dYiEficauexp=D(expression(log(((Asp-AspCd/FCd)/(Aspau-AspCdau/FCdau))*(Gthau/Gth*Eficau/Efic))), 'Eficau')
    dYiEficau=eval(((Asp - AspCd/FCd)/(Aspau[idouro] - AspCdau[idouro]/FCdau[idouro])) * (Gthau[idouro]/Gth/Efic)/(((Asp - AspCd/FCd)/(Aspau[idouro] - AspCdau[idouro]/FCdau[idouro])) * (Gthau[idouro]/Gth * Eficau[idouro]/Efic)))
  
#Cálculo da Variância

varsup=(dYsAspCd*sAspCd)^2+(dYsQ0*sQ0)^2+(dYsEfic*sEfic)^2+(dYsFCd*sFCd)^2+(dYsGepi*sGepi)^2
varinf=(dYiAsp*sAsp)^2+(dYiAspCd*sAspCd)^2+(dYiFCd*sFCd)^2+(dYiGth*sGth)^2+(dYiEfic*sEfic)^2+(dYiAspau*sAspau[idouro])^2+(dYiAspCdau*sAspCdau[idouro])^2+(dYiFCdau*sFCdau[idouro])^2+(dYiGthau*sGthau[idouro])^2+(dYiEficau*sEficau[idouro])^2
varY=c(varsup,varinf)
vY=diag(varY)

for(i in 1:N) {
  for(j in i+1:N) {
    if(isTRUE(Isotopo[i]==Isotopo[j]) & isTRUE(idouro[i]==idouro[j])) {
      vY[i,j]=dYsQ0[i]*dYsQ0[j]*sQ0[i]^2+dYsFCd[i]*dYsFCd[j]*sFCd[i]^2+dYsGepi[i]*dYsGepi[j]*sGepi[i]^2
      vY[j,i]=vY[i,j]
    }
  }
}

for(i in 1:N) {
  for(j in (N+1):(N*2)) {
    if(isTRUE(Egama[i]==Egama[j-N]) & isTRUE(idouro[i]==idouro[j-N])) {
      k=j-N
      vY[i,j]=dYsAspCd[i]*dYiAspCd[k]*sAspCd[i]^2+dYsFCd[i]*dYiFCd[k]*sFCd[i]^2+dYsEfic[i]*dYiEfic[k]*sEfic[i]^2 
      vY[j,i]=vY[i,j]
    }
  }
}

for(i in 1:N) {
  for(j in (N+1):(N*2)) {
    if(isTRUE(Isotopo[i]==Isotopo[j-N]) & isFALSE(Egama[i]==Egama[j-N]) & isTRUE(idouro[i]==idouro[j-N])) {
      k=j-N
      vY[i,j]=dYsFCd[i]*dYiFCd[k]*sFCd[i]^2
      vY[j,i]=vY[i,j]
    }
  }
}

for(i in (N+1):(N*2)) {
  for(j in (i+1):(N*2)) {
    if(isTRUE(Isotopo[i-N]==Isotopo[j-N]) & isFALSE(Egama[i-N]==Egama[j-N]) & isTRUE(idouro[i-N]==idouro[j-N])) {
      k=i-N
      l=j-N
      vY[i,j]=dYiAspCdau[idouro[k]]*dYiAspCdau[idouro[l]]*sAspCdau[idouro[k]]^2+dYiAspau[idouro[k]]*dYiAspau[idouro[l]]*sAspau[idouro[k]]^2+dYiFCdau[idouro[k]]*dYiFCdau[idouro[l]]*sFCdau[idouro[k]]^2+dYiGthau[idouro[k]]*dYiGthau[idouro[l]]*sGthau[idouro[k]]^2+dYiEficau[idouro[k]]*dYiEficau[idouro[l]]*sEficau[idouro[k]]^2+dYiGth[k]*dYiGth[l]*sGth[k]^2+dYiFCd[k]*dYiFCd[l]*sFCd[k]^2
      vY[j,i]=vY[i,j]
    }
  }
}

for(i in (N+1):(N*2)) {
  for(j in (i+1):(N*2)) {
    if(isTRUE(Isotopo[i-N]!=Isotopo[j-N]) & isTRUE(idouro[i-N]==idouro[j-N])) {
      k=i-N
      l=j-N
      vY[i,j]=dYiAspCdau[idouro[k]]*dYiAspCdau[idouro[l]]*sAspCdau[idouro[k]]^2+dYiAspau[idouro[k]]*dYiAspau[idouro[l]]*sAspau[idouro[k]]^2+dYiFCdau[idouro[k]]*dYiFCdau[idouro[l]]*sFCdau[idouro[k]]^2+dYiGthau[idouro[k]]*dYiGthau[idouro[l]]*sGthau[idouro[k]]^2+dYiEficau[idouro[k]]*dYiEficau[idouro[l]]*sEficau[idouro[k]]^2
      vY[j,i]=vY[i,j]
    }
  }
}

# matrix de planejamento
cols=rep(1, N)
coli=rep(0, N)
col1=c(cols, coli)

cols2=0
for(i in 1:N) {
  cols2[i]=((Q0[i]+0.429)*log(Eres[i])-0.602)/Q0[i]
}

coli2=rep(0, N)
col2=c(cols2, coli2)

Ntotal=N*2
X=matrix(c(0),nrow=Ntotal, ncol=N)

for(i in 1:N) {
  X[i,i]=1
  X[(N+i),i]=1
}
  
X=cbind(col1, col2, X)

ncolX=ncol(X)
vpar=inv(t(X)%*%inv(vY)%*%X)
par=vpar%*%t(X)%*%inv(vY)%*%Y
Yaju=X%*%par
dif=Y-Yaju
# x <- seq(0,5,length=100)
# getPred <- function(parS, xx) parS$a * exp(xx * parS$b) + parS$c
# pp <- list(a=9,b=-1, c=6)
# simDNoisy <- getPred(pp,x) + rnorm(length(x),sd=.1)
# plot(x,simDNoisy, main="data")
# residFun <- function(p, observed, xx) observed - getPred(p,xx)
# parStart <- list(a=3,b=-.001, c=1)
# nls.out <- nls.lm(par=parStart, fn = residFun, observed = simDNoisy, xx = x, control = nls.lm.control(nprint=1))
# lines(x,getPred(as.list(coef(nls.out)), x), col=2, lwd=2)
# summary(nls.out)
